*-----------------------------------------------------------
* Title      : Cumulative Sum
* Written by : Adam Krpan
* Date       : 2/18/2018
* Description: Sums 512 n times based on user input to simulate multiplication
*-----------------------------------------------------------
    * Equates section
start       EQU $400    ; The start of the code
exit        EQU $2700   ; The code to exit the simulator
CR          EQU $0D     ; Carriage return
LF          EQU $0A     ; Line feed
mult        EQU 512     ; The number we're multiplying
    * Trap codes (for ease of reading)
println     EQU 14
readnum     EQU 4
printnum    EQU 3

            * Code section
            ORG start
    
            * Print message request
input       LEA inmsg, A1           ; Load the input message
            MOVE.B #println, D0     ; State that we're printing a message
            TRAP #15                ; Execute the console output
    
            * Read in input for n
            MOVE.B #readnum, D0     ; State that we're reading a number
            TRAP #15                ; Execute the read
            
            * Input validation
            CMP.L #0, D1            ; Check if D1 is >= 0
            BGE loop                ; D1 >= 0, continue with the rest of the program
            
            * Input invalid
            LEA inerr, A1           ; Load the error message
            MOVE.B #println, D0     ; State that we're printing a message
            TRAP #15                ; Execute the console output
            BRA input               ; Go back and get input again
    
            * Loop section
loop        CMP.L #0, D1            ; Check if the counter has reached 0
            BEQ finish              ; If it has, finish up and exit
            
            * Execute the addition and decrement the counter
            ADD.L #mult, D2         ; Add the number to D2
            SUB.L #1, D1            ; Decrement D1 by 1
            BRA loop                ; Continue the loop
            
            * Print the sum
finish      LEA sumout, A1          ; Load the output message
            MOVE.B #println, D0     ; State that we're printing a message
            TRAP #15                ; Execute the output
            
            MOVE.B #printnum, D0    ; State that we're printing a number
            MOVE.L D2, D1           ; Move the sum into D1
            TRAP #15                ; Execute the output
            
            CLR D1                  ; Clear D1 for future output
            
            BCC carryclr            ; If the carry bit isn't set, skip this next part
            
            * Print that the carry was set
            MOVE.L #$0001, D1       ; Move a '1' into D1 to indicate carryover
            
            LEA cmsg, A1            ; Load the carry message
            MOVE.B #println, D0     ; State that we're printing a message
            TRAP #15                ; Execute the output
            
carryclr    STOP #exit
    
    * Data section
inmsg   DC.B 'Enter n (the number to multiply by): ',0
inerr   DC.B 'The number must be >= 0.',CR,LF,0
sumout  DC.B 'The sum is: ',0
cmsg    DC.B CR,LF,'The carry bit was set.',0

    END start
*~Font name~Courier New~
*~Font size~10~
*~Tab type~1~
*~Tab size~4~
